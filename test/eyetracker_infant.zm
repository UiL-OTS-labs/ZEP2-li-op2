/******************************************************************************\
FILE:           eyetracker_infant.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a device independent eye-tracker object. Since this version is to
be used for infant studies it uses images for the targets and sounds are
played on various events.


HISTORY:
2019-08-09 TV   Created.

\******************************************************************************/

// Import the module corresponding to the eye-tracker device being used.
import std_et_dummy_infant;
//import std_et_eyelink_infant;
//import std_et_tobii_infant;

import std_sound_playback;


enum EyeTrkMessage
{
    DRIFT_CHECK_DONE,
    RECALIBRATE,
    RECORDING_DONE,
}


EyeTracker eyetracker
{
    void setup()
    {
        // Link to eye-tracker device interface. This device produces our
        // gaze samples and all other events (see below).
        source = eyetracker_device;

        // Duration of attention target phase, focus target phase and
        // wake-up target (if shown).
//        attention_target_duration   = 1000ms;
        focus_target_duration       = 1000ms;
//        wakeup_target_duration      = 1000ms;

        // Target circle outline color and fill color and wake-up color.
//        default_target_line_color   = color:black;
//        default_target_color        = color:red;
//        wakeup_target_color         = color:yellow;

        // Target images to be used instead of circles.
        attention_target_image      = zep_dir() + "data/images/teddy.svg";
        focus_target_image          = zep_dir() + "data/images/teddy.svg";
        wakeup_target_image         = zep_dir() + "data/images/sun.svg";

        // Image to display during camera setup and when testing tracking.
        setup_target_image          = zep_dir() + "data/images/doll.svg";
        test_image                  = zep_dir() + "data/images/test-image.png";

        // Whether target should cross fade from image to circle in focus
        // phase.
        cross_fade_focus_target     = false;

        // Maximum/minimum target width at begin/end of focus phase [px].
        max_target_size             = 150;
        min_target_size             = 40;

        // Base width of (unmodulated) target [px].
        setup_target_size           = 150;

        // Amplitude and frequency of target size modulation.
        target_size_mod             = 0.0;      // 0..1
//        target_size_mod_freq        = 1.0;      // 0..10Hz

        // Amplitude and frequency of target rotation modulation.
//        target_wiggle_mod           = 0.05;     // 0..10
        target_wiggle_mod_freq      = 2.0;      // 0..10Hz

        // Where to store native format eye data files if supported by
        // eye-tracker device. Not defining this directory turns off the
        // creation of native format eye data files.
//        output_dir                  = data_dir() + script_name() + "/dat/";
    }


    void cleanup()
    {
        // Unlink from eye-tracker device interface.
        source = null;
    }


    // Called when user is leaving the eye-tracker's setup menu to continue
    // the experiment.
    on_event:proceed()
    {
        signal_target(CONTINUE);
        target = null;
    }


    // Called when user is leaving the eye-tracker's setup menu with the
    // intent to abort the experiment.
    on_event:dont_proceed()
    {
        signal_target(CANCEL);
        target = null;
    }


    // Called on entering the camera setup menu.
    on_event:camera_setup_begin()
    {
        // Play a sound 5 times with 5s interval.
        sound_playback.play(zep_dir() + "data/sounds/baby-giggle.wav",
            now() + 1000ms, 5000ms, 5);
    }


    // Called on continuing with camera setup after the participant has been
    // presented a wake-up image/sound.
    on_event:camera_setup_cont()
    {
        // Play a sound 5 times with 5s interval.
        sound_playback.play(zep_dir() + "data/sounds/baby-giggle.wav",
            now() + 1000ms, 5000ms, 5);
    }


    // Called on entering the attention getting phase of the calibration
    // target display.
    on_event:attention_begin()
    {
        // Play a sound repeatedly with 250ms intervals.
        sound_playback.play(zep_dir() + "data/sounds/chime-melody.wav",
            now() + 10ms, 250ms, -1);
    }


    // Called on continuing with the attention getting phase after the
    // participant has been presented a wake-up image/sound.
    on_event:attention_cont()
    {
        // Play a sound repeatedly with 250ms intervals.
        sound_playback.play(zep_dir() + "data/sounds/chime-melody.wav",
            now() + 10ms, 250ms, -1);
    }


    // Called on entering the focus-in phase of the calibration target display.
    on_event:focus_begin()
    {
        // Play a sound.
        sound_playback.play(zep_dir() + "data/sounds/chime-down.wav",
            now() + 10ms);
    }


    // Called on entering the final phase of the calibration target display.
    on_event:final_begin()
    {
        // Play a sound.
        sound_playback.play(zep_dir() + "data/sounds/chime-up.wav",
            now() + 10ms);
    }


    // Called on continuing with the final phase after the participant has
    // been presented a wake-up image/sound.
    on_event:final_cont()
    {
        // Play a sound.
        sound_playback.play(zep_dir() + "data/sounds/chime-up.wav",
            now() + 10ms);
    }


    // Called at start of a participant wake-up signal.
    on_event:wakeup_begin()
    {
        // Play a sound.
        sound_playback.play(zep_dir() + "data/sounds/baby-laugh.wav",
            now() + 10ms);
    }


    // Called when a calibration target is removed.
    on_event:target_end()
    {
        // Kill any sound if still playing.
        sound_playback.abort();
    }


    // Called when the drift-check routine has been completed.
    on_event:drift_check_done()
    {
        signal_target(DRIFT_CHECK_DONE);
    }


    on_event:drift_check_fail()
    {
        signal_target(RECALIBRATE);
    }


    on_event:drift_check_abort()
    {
        signal_target(RECALIBRATE);
    }


    on_event:tracking_done()
    {
        control.hide_gaze();
        control.hide_fixation();

        signal_target(RECORDING_DONE);
    }


    on_event:tracking_fail()
    {
        control.hide_gaze();
        control.hide_fixation();

        signal_target(RECORDING_DONE);
    }


    on_event:tracking_abort()
    {
        control.hide_gaze();
        control.hide_fixation();

        signal_target(RECORDING_DONE);
    }


    on_event:gaze_sample()
    {
        // Reported eye positions are relative to the test window.

        if (!eye_data_ignore_or_no_eyes)
        {
            control.show_gaze(
                gaze_x / test_window1.width,
                gaze_y / test_window1.height);
        }
        else
        {
            control.hide_gaze();
        }
    }


/*
    on_event:saccade_start()
    {
    }


    on_event:saccade_end()
    {
    }
*/


    on_event:fixation_start()
    {
        // Reported eye positions are relative to the test window.

        control.show_fixation(
            fixation_x / test_window1.width,
            fixation_y / test_window1.height);
    }


    on_event:fixation_end()
    {
        // Reported eye positions are relative to the test window.

        control.hide_fixation();
    }


    on_event:fixation_update()
    {
        // Reported eye positions are relative to the test window.

        control.show_fixation(
            fixation_x / test_window1.width,
            fixation_y / test_window1.height);
    }


    on_event:blink_start()
    {
        control.hide_gaze();
        control.hide_fixation();
    }


/*
    on_event:blink_end()
    {
    }


    on_event:blink_update()
    {
    }
*/


    bool handle_key(char key, int modifiers)
    {
        return eyetracker_device.handle_key(key, modifiers);
    }
}


CsvEyeDataWriter eye_data_writer
{
    init()
    {
        source = eyetracker;

        // Where to store regular eye data files. If you don't need these
        // files, then simply remove the eye_data_writer object and all
        // references to it.
        output_dir = data_dir() + script_name() + "/csv/";
    }
}
